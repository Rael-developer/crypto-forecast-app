import streamlit as st
import plotly.graph_objects as go
from prophet import Prophet
import pandas as pd
from datetime import date, timedelta, datetime # Importar datetime e timedelta

# Assumindo que crypto_utils.py existe e cont√©m as fun√ß√µes necess√°rias
# get_price, get_historical_data, get_all_symbols
# Se voc√™ n√£o tiver esse arquivo, precisar√° implementar essas fun√ß√µes ou usar uma API
# Exemplo b√°sico de como seriam (substitua pela sua l√≥gica real):
# def get_price(symbol):
#     # Implemente a l√≥gica para obter o pre√ßo atual da criptomoeda
#     return 50000.00 # Exemplo

# def get_historical_data(symbol, days):
#     # Implemente a l√≥gica para obter dados hist√≥ricos (ds, y)
#     # Isso deve retornar um DataFrame com colunas 'ds' (data) e 'y' (pre√ßo)
#     # Para fins de demonstra√ß√£o, vou criar dados falsos
#     today = date.today()
#     dates = [today - timedelta(days=i) for i in range(days)]
#     prices = [10000 + i*10 + (i%5)*500 for i in range(days)] # Dados de exemplo
#     df = pd.DataFrame({'ds': dates, 'y': prices})
#     return df

# def get_all_symbols():
#     # Implemente a l√≥gica para obter todos os s√≠mbolos de criptomoedas
#     return ["BTC", "ETH", "ADA", "XRP"] # Exemplo

# --- Seu c√≥digo crypto_utils.py (ou as fun√ß√µes implementadas aqui) ---
# Se o seu crypto_utils j√° funciona, ignore os exemplos acima.
from crypto_utils import get_price, get_historical_data, get_all_symbols
# --- Fim do seu c√≥digo crypto_utils.py ---


# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Previs√£o Cripto", layout="wide")

# T√≠tulo
st.title("üìà Previs√£o de Criptomoedas com IA")
st.markdown("Com *confiabilidade* de previs√£o e cota√ß√£o em tempo real.") # Adicionando um subt√≠tulo

# --- Sidebar - Configura√ß√µes ---
st.sidebar.header("‚öôÔ∏è Configura√ß√µes de Previs√£o")

moedas = get_all_symbols()
symbol = st.sidebar.selectbox("Escolha a Cripto", moedas, key="select_crypto")

# Op√ß√£o para escolher entre dias de previs√£o ou data final
prediction_mode = st.sidebar.radio(
    "Modo de Previs√£o",
    ("Por Dias", "Por Data Espec√≠fica"),
    key="prediction_mode"
)

forecast_period = None
if prediction_mode == "Por Dias":
    dias = st.sidebar.slider("Dias de Previs√£o", 1, 365 * 10, 30, key="forecast_days_slider") # Estendido para 10 anos
    forecast_period = dias
else:
    # Definindo um limite m√°ximo razo√°vel, como 2035 ou 2040
    # A data inicial para o calend√°rio ser√° o dia atual + 1 dia
    min_date = date.today() + timedelta(days=1)
    max_date = date(2035, 12, 31) # Por exemplo, at√© o final de 2035

    end_date = st.sidebar.date_input(
        "Prever at√©",
        min_value=min_date,
        max_value=max_date,
        value=min_date, # Valor inicial para evitar erro se a data minima for maior que o default
        key="forecast_end_date"
    )
    # Calcular o n√∫mero de dias a partir da data atual at√© a data final selecionada
    forecast_period = (end_date - date.today()).days

# Garantir que forecast_period seja pelo menos 1
if forecast_period is not None and forecast_period < 1:
    forecast_period = 1
    st.sidebar.warning("A data de previs√£o deve ser no futuro. Ajustado para 1 dia.")

# --- Exibe pre√ßo atual ---
st.subheader(f"üíµ Cota√ß√£o Atual: {symbol}")
preco_atual = get_price(symbol)
if preco_atual:
    st.markdown(f"### *${preco_atual:,.2f}*") # Destaque o pre√ßo atual
    st.markdown("(Dados em tempo real, sujeitos a pequenas varia√ß√µes)")
else:
    st.error("N√£o foi poss√≠vel obter o pre√ßo atual. Verifique sua conex√£o ou a disponibilidade dos dados.")

# --- Obt√©m hist√≥rico ---
st.subheader(f"üìä Hist√≥rico de Pre√ßos: {symbol}")
historico = get_historical_data(symbol, days=365*2) # Obter mais dados hist√≥ricos para melhor previs√£o

# Ajusta formato para Prophet
historico = historico.dropna()
historico['ds'] = pd.to_datetime(historico['ds'])
historico['y'] = historico['y'].astype(float)

# Verifica√ß√£o de dados
if historico.empty or len(historico) < 2:
    st.warning(f"N√£o h√° dados hist√≥ricos suficientes para *{symbol}*. Por favor, tente outra moeda ou aguarde a disponibilidade dos dados.")
    st.stop()

# --- Gr√°fico hist√≥rico ---
fig_hist = go.Figure()
fig_hist.add_trace(go.Scatter(x=historico['ds'], y=historico['y'],
                              mode='lines', name='Hist√≥rico de Pre√ßos',
                              line=dict(color='orange', width=2)))
fig_hist.update_layout(
    title=f"*Tend√™ncia Hist√≥rica de Pre√ßos - {symbol}*",
    xaxis_title="Data",
    yaxis_title="Pre√ßo (USD)",
    hovermode="x unified",
    template="plotly_white" # Um tema mais limpo
)
st.plotly_chart(fig_hist, use_container_width=True)

# --- Previs√£o com Prophet ---
st.subheader("üîÆ Previs√£o de Pre√ßos para o Futuro")
if forecast_period is None:
    st.warning("Selecione um per√≠odo de previs√£o na barra lateral.")
else:
    with st.spinner(f"Gerando previs√£o para os pr√≥ximos {forecast_period} dias..."):
        model = Prophet(
            daily_seasonality=True,
            weekly_seasonality=True, # Adicionado para melhor sazonalidade
            yearly_seasonality=True, # Adicionado para melhor sazonalidade anual
            interval_width=0.95 # Aumenta a largura do intervalo de confian√ßa para 95%
        )
        model.fit(historico)
        future = model.make_future_dataframe(periods=forecast_period)
        forecast = model.predict(future)

    # --- Gr√°fico de Previs√£o com "Pontinhos Pretos" e Faixa de Confian√ßa ---
    fig_forecast = go.Figure()

    # Faixa de Confian√ßa (Sua "Marca de Confian√ßa")
    fig_forecast.add_trace(go.Scatter(
        x=forecast['ds'], y=forecast['yhat_upper'],
        mode='lines', line=dict(width=0),
        name='Limite Superior', showlegend=False
    ))
    fig_forecast.add_trace(go.Scatter(
        x=forecast['ds'], y=forecast['yhat_lower'],
        mode='lines', line=dict(width=0),
        fill='tonexty', fillcolor='rgba(100, 149, 237, 0.2)', # Tom de azul mais suave
        name='Faixa de Confian√ßa (95%)' # Nomeando para clareza
    ))

    # Linha de Previs√£o
    fig_forecast.add_trace(go.Scatter(
        x=forecast['ds'], y=forecast['yhat'],
        mode='lines', name='Previs√£o', line=dict(color='blue', width=3, dash='dot') # Linha de previs√£o destacada
    ))

    # Hist√≥rico (Os "Pontinhos Pretos")
    fig_forecast.add_trace(go.Scatter(
        x=historico['ds'], y=historico['y'],
        mode='markers', name='Dados Hist√≥ricos (Pontinhos Pretos)',
        marker=dict(color='black', size=4, opacity=0.8) # Tamanho um pouco menor para o ponto preto
    ))

    fig_forecast.update_layout(
        title=f"*Previs√£o de Pre√ßos para {symbol}* (Pr√≥ximos {forecast_period} dias)",
        xaxis_title="Data", yaxis_title="Pre√ßo (USD)",
        hovermode="x unified",
        template="plotly_white",
        legend=dict(x=0.01, y=0.99, bgcolor='rgba(255,255,255,0.7)', bordercolor='rgba(0,0,0,0.2)', borderwidth=1)
    )

    st.plotly_chart(fig_forecast, use_container_width=True)
