import streamlit as st
import plotly.graph_objects as go
from prophet import Prophet
import pandas as pd
from datetime import date, timedelta, datetime

# --- SEU C√ìDIGO crypto_utils.py (ou as fun√ß√µes implementadas aqui) ---
# Mantenha suas implementa√ß√µes reais para get_price, get_historical_data, get_all_symbols
# Se voc√™ estiver usando as fun√ß√µes de exemplo, garanta que elas gerem dados suficientes
from crypto_utils import get_price, get_historical_data, get_all_symbols
# --- FIM DO SEU C√ìDIGO crypto_utils.py ---


# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Previs√£o Cripto", layout="wide")

# T√≠tulo
st.title("üìà Previs√£o de Criptomoedas By: Israel Rodrigues")
st.markdown("Com *confiabilidade* de previs√£o e cota√ß√£o em tempo real.")

# --- Sidebar - Configura√ß√µes ---
st.sidebar.header("‚öôÔ∏è Configura√ß√µes de Previs√£o")

moedas = get_all_symbols()
symbol = st.sidebar.selectbox("Escolha a Cripto", moedas, key="select_crypto")

prediction_mode = st.sidebar.radio(
    "Modo de Previs√£o",
    ("Por Dias", "Por Data Espec√≠fica"),
    key="prediction_mode"
)

forecast_period = None
if prediction_mode == "Por Dias":
    dias = st.sidebar.slider("Dias de Previs√£o", 1, 365 * 10, 30, key="forecast_days_slider")
    forecast_period = dias
else:
    min_date = date.today() + timedelta(days=1)
    max_date = date(2035, 12, 31)

    end_date = st.sidebar.date_input(
        "Prever at√©",
        min_value=min_date,
        max_value=max_date,
        value=min_date,
        key="forecast_end_date"
    )
    forecast_period = (end_date - date.today()).days

if forecast_period is not None and forecast_period < 1:
    forecast_period = 1
    st.sidebar.warning("A data de previs√£o deve ser no futuro. Ajustado para 1 dia.")

# --- Exibe pre√ßo atual ---
st.subheader(f"üíµ Cota√ß√£o Atual: {symbol}")
preco_atual = get_price(symbol)
if preco_atual:
    st.markdown(f"### *${preco_atual:,.2f}*")
    st.markdown("(Dados em tempo real, sujeitos a pequenas varia√ß√µes)")
else:
    st.error("N√£o foi poss√≠vel obter o pre√ßo atual. Verifique sua conex√£o ou a disponibilidade dos dados.")

# --- Obt√©m hist√≥rico ---
st.subheader(f"üìä Hist√≥rico de Pre√ßos: {symbol}")

# Tente obter mais dados hist√≥ricos, o que pode ajudar em previs√µes de longo prazo
# e tamb√©m a ter dados suficientes mesmo ap√≥s a remo√ß√£o de nulos.
historico = get_historical_data(symbol, days=365*3) # Tentar 3 anos de dados

# Ajusta formato para Prophet
# Verifique se 'ds' e 'y' existem antes de prosseguir
if 'ds' not in historico.columns or 'y' not in historico.columns:
    st.error(f"Os dados hist√≥ricos para *{symbol}* n√£o cont√™m as colunas 'ds' (data) e/ou 'y' (pre√ßo). Verifique a fun√ß√£o get_historical_data.")
    st.stop()

# Remove linhas com valores nulos
historico = historico.dropna(subset=['ds', 'y'])

# Garante que 'ds' √© datetime e 'y' √© num√©rico
try:
    historico['ds'] = pd.to_datetime(historico['ds'])
    historico['y'] = pd.to_numeric(historico['y'])
except Exception as e:
    st.error(f"Erro ao converter colunas 'ds' ou 'y' para o formato correto: {e}. Verifique os dados brutos de get_historical_data.")
    st.stop()

# --- VERIFICA√á√ÉO CR√çTICA DE DADOS ANTES DO PROPHET ---
# Adicionei uma verifica√ß√£o mais robusta aqui
if historico.empty or len(historico) < 2:
    st.warning(f"üö® *Dados insuficientes para gerar a previs√£o para {symbol}.*")
    st.info("O modelo de previs√£o requer pelo menos *dois pontos de dados hist√≥ricos v√°lidos* para funcionar. Por favor:")
    st.markdown("- *Tente selecionar outra criptomoeda.*")
    st.markdown("- *Verifique a sua fonte de dados* (crypto_utils.py) para garantir que ela est√° retornando um hist√≥rico robusto para a moeda selecionada.")
    st.stop() # Interrompe a execu√ß√£o do Streamlit aqui se n√£o houver dados suficientes

# Gr√°fico hist√≥rico
fig_hist = go.Figure()
fig_hist.add_trace(go.Scatter(x=historico['ds'], y=historico['y'],
                              mode='lines', name='Hist√≥rico de Pre√ßos',
                              line=dict(color='orange', width=2)))
fig_hist.update_layout(
    title=f"*Tend√™ncia Hist√≥rica de Pre√ßos - {symbol}*",
    xaxis_title="Data",
    yaxis_title="Pre√ßo (USD)",
    hovermode="x unified",
    template="plotly_white"
)
st.plotly_chart(fig_hist, use_container_width=True)

# Previs√£o com Prophet
st.subheader("üîÆ Previs√£o de Pre√ßos para o Futuro")
if forecast_period is None:
    st.warning("Selecione um per√≠odo de previs√£o na barra lateral.")
else:
    with st.spinner(f"Gerando previs√£o para os pr√≥ximos {forecast_period} dias..."):
        model = Prophet(
            daily_seasonality=True,
            weekly_seasonality=True,
            yearly_seasonality=True,
            interval_width=0.95
        )
        model.fit(historico) # AQUI ERA ONDE DAVA O ERRO, AGORA PROTEGIDO

    fig_forecast = go.Figure()

    fig_forecast.add_trace(go.Scatter(
        x=forecast['ds'], y=forecast['yhat_upper'],
        mode='lines', line=dict(width=0),
        name='Limite Superior', showlegend=False
    ))
    fig_forecast.add_trace(go.Scatter(
        x=forecast['ds'], y=forecast['yhat_lower'],
        mode='lines', line=dict(width=0),
        fill='tonexty', fillcolor='rgba(100, 149, 237, 0.2)',
        name='Faixa de Confian√ßa (95%)'
    ))

    fig_forecast.add_trace(go.Scatter(
        x=forecast['ds'], y=forecast['yhat'],
        mode='lines', name='Previs√£o', line=dict(color='blue', width=3, dash='dot')
    ))

    fig_forecast.add_trace(go.Scatter(
        x=historico['ds'], y=historico['y'],
        mode='markers', name='Dados Hist√≥ricos (Pontinhos Pretos)',
        marker=dict(color='black', size=4, opacity=0.8)
    ))

    fig_forecast.update_layout(
        title=f"*Previs√£o de Pre√ßos para {symbol}* (Pr√≥ximos {forecast_period} dias)",
        xaxis_title="Data", yaxis_title="Pre√ßo (USD)",
        hovermode="x unified",
        template="plotly_white",
        legend=dict(x=0.01, y=0.99, bgcolor='rgba(255,255,255,0.7)', bordercolor='rgba(0,0,0,0.2)', borderwidth=1)
    )

    st.plotly_chart(fig_forecast, use_container_width=True)

    st.markdown("""
    ---
    *Entendendo a Previs√£o:*
    * *Linha Azul Pontilhada:* √â a previs√£o de pre√ßo do modelo.
    * *√Årea Azul Claro:* Representa a *faixa de confian√ßa* de 95%. Isso significa que, com base nos dados hist√≥ricos, h√° 95% de chance de o pre√ßo real cair dentro dessa √°rea. Quanto mais estreita a faixa, maior a "confian√ßa" do modelo naquela previs√£o.
    * *Pontos Pretos:* S√£o os dados hist√≥ricos reais usados para treinar o modelo.
    """)

    st.subheader("üìä Detalhes da Previs√£o em Tabela")
    forecast_details = forecast[forecast['ds'] > historico['ds'].max()]
    st.dataframe(forecast_details[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].rename(
        columns={
            'ds': 'Data',
            'yhat': 'Previs√£o (USD)',
            'yhat_lower': 'Limite Inferior (USD)',
            'yhat_upper': 'Limite Superior (USD)'
        }
    ).set_index('Data').round(2))
